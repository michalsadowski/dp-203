{
	"name": "LoadProductsData",
	"properties": {
		"folder": {
			"name": "dp-203/05-Pipelines/10-Lab-Build a data pipeline in Azure Synapse Analytics"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Products_Csv",
						"type": "DatasetReference"
					},
					"name": "ProductsText",
					"description": "Products text data"
				},
				{
					"dataset": {
						"referenceName": "DimProduct",
						"type": "DatasetReference"
					},
					"name": "ProductTable"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DimProduct",
						"type": "DatasetReference"
					},
					"name": "DimProductTable",
					"description": "Load DimProduct table"
				}
			],
			"transformations": [
				{
					"name": "MatchedProducts",
					"description": "Matched product data. The lookup returns a set of columns from both sources, essentially forming an outer join that matches the ProductID column in the text file to the ProductAltKey column in the data warehouse table. When a product with the alternate key already exists in the table, the dataset will include the values from both sources. When the product dos not already exist in the data warehouse, the dataset will contain NULL values for the table columns."
				},
				{
					"name": "SetLoadAction",
					"description": "Insert new, upsert existing"
				}
			],
			"scriptLines": [
				"parameters{",
				"     suffix as string",
				"}",
				"source(output(",
				"          ProductID as string,",
				"          ProductName as string,",
				"          Color as string,",
				"          Size as string,",
				"          ListPrice as string,",
				"          Discontinued as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> ProductsText",
				"source(output(",
				"          ProductKey as integer,",
				"          ProductAltKey as string,",
				"          ProductName as string,",
				"          Color as string,",
				"          Size as string,",
				"          ListPrice as decimal(19,4),",
				"          Discontinued as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: true) ~> ProductTable",
				"ProductsText, ProductTable lookup(ProductID == ProductAltKey,",
				"     multiple: false,",
				"     pickup: 'last',",
				"     asc(ProductKey, true),",
				"     broadcast: 'auto')~> MatchedProducts",
				"MatchedProducts alterRow(insertIf(isNull(ProductKey)),",
				"     upsertIf(not(isNull(ProductKey)))) ~> SetLoadAction",
				"SetLoadAction sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ProductKey as integer,",
				"          ProductAltKey as string,",
				"          ProductName as string,",
				"          Color as string,",
				"          Size as string,",
				"          ListPrice as decimal(19,4),",
				"          Discontinued as boolean",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['ProductAltKey'],",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          ProductAltKey = ProductID,",
				"          ProductName = ProductsText@ProductName,",
				"          Color = ProductsText@Color,",
				"          Size = ProductsText@Size,",
				"          ListPrice = ProductsText@ListPrice,",
				"          Discontinued = ProductsText@Discontinued",
				"     )) ~> DimProductTable"
			]
		}
	}
}