@startmindmap
<style>
:depth(0) {
    BackgroundColor #091f2c
    FontColor #ffffff
    LineThickness 3.0
}
.topic1 {
    BackgroundColor #ffb900
    LineColor #ffb900
    LineThickness 3.0
    FontColor #000000
}
.topic2 {
    BackgroundColor #f4364c
    LineColor #f4364c
    LineThickness 3.0
    FontColor #ffffff
}
.topic3 {
    BackgroundColor #c5b4e3
    LineColor #c5b4e3
    LineThickness 3.0
    FontColor #000000
}
.topic4 {
    BackgroundColor #e1d3c7
    LineColor #e1d3c7
    LineThickness 3.0
    FontColor #000000
}
.topic5 {
    BackgroundColor #07641d
    LineColor #07641d
    LineThickness 3.0
    FontColor #ffffff
}
</style>
+ Synapse Link
++ 1) How to enable? <<topic1>>
+++ Synapse Link in Azure Cosmos DB <<topic1>>
++++_ Use the Azure portal or Azure CLI, PowerShell
++++_ Azure Cosmos DB for NoSQL
++++_ Azure Cosmos DB for MongoDB
++++_ Azure Cosmos DB for Apache Gremlin (preview)
+++ Considerations <<topic1>>
++++_ You can't disable it
++++_ Choose which container to enable
++++_ Schema Type: WellDefined (default) or FullFidelity
++++_ After a schema type has been assigned, you can't change it.
++ 2) Create container <<topic2>>
+++ Analytical store schema types <<topic2>>
++++ Well-defined <<topic2>>
+++++_ The default schema type for an Azure Cosmos DB for NoSQL account.
++++ Full fidelity <<topic2>>
+++++_ The default (and only supported) schema type for an Azure Cosmos DB for MongoDB account.
+++ Considerations <<topic2>>
++++_ Analytical store support can't be disabled without deleting the container
++++_ Disable the analytical store: set TTL value to 0 or null
+++++_ By no longer synchronizing new items
+++++_ Deleting items already synchronized
++++_ After TTL = 0, you can't re-enable analytical store
++ 3) Create a linked service for Cosmos DB <<topic3>>
+++ Authentication options: <<topic3>>
++++_ Account key
++++_ Service Principal
++++_ System Assigned Managed Identity
++++_ User Managed Identity
++ 4) Query Cosmos DB data with Spark <<topic4>>
+++_ Load into DF: spark.read.format("cosmos.olap")
+++_ Write dataframe to a Cosmos DBL: mydf.write.format("cosmos.oltp")
+++_ Use Spark SQL to query Azure Cosmos DB
++ 5) Query Cosmos DB with Synapse SQL <<topic5>>
+++_ Use OPENROWSET with an authentication key
+++_ Use OPENROWSET with a credential
+++_ Specify a schema
+++_ Creatw a view in a database
+++ Considerations for Serverless SQL pools <<topic5>>
++++_ Provision your Azure Cosmos DB everything in the same region as serverless SQL pool.
++++_ When working with string columns, use the OPENROWSET function with the explicit WITH clause \nand specify an appropriate data length for the string data.
@endmindmap