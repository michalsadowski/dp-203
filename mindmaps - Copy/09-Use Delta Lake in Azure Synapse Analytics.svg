<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" height="774px" preserveAspectRatio="none" style="width:1383px;height:774px;background:#FFFFFF;" version="1.1" viewBox="0 0 1383 774" width="1383px" zoomAndPan="magnify"><defs/><g><rect fill="#091F2C" height="37.6094" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:3.0;" width="88" x="10" y="367.2539"/><text fill="#FFFFFF" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="68" x="20" y="391.7871">Delta Lake</text><rect fill="#FFB900" height="37.6094" rx="12.5" ry="12.5" style="stroke:#FFB900;stroke-width:3.0;" width="186" x="188" y="89.0234"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="162" x="198" y="113.5566">1) Understand Delta Lake</text><rect fill="#FFB900" height="37.6094" rx="12.5" ry="12.5" style="stroke:#FFB900;stroke-width:3.0;" width="90" x="464" y="40"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="66" x="474" y="64.5332">What is it?</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="482" x="647" y="54.7285">Open-source storage layer that adds relational database semantics to Spark</text><path d="M554,58.8047 L564,58.8047 C579,58.8047 619,49 634,49 L644,49 " fill="none" style="stroke:#FFB900;stroke-width:3.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="120" x="647" y="74.3379">Serialization format</text><path d="M554,58.8047 L564,58.8047 C579,58.8047 619,68.6094 634,68.6094 L644,68.6094 " fill="none" style="stroke:#FFB900;stroke-width:3.0;"/><path d="M374,107.8281 L384,107.8281 C399,107.8281 439,58.8047 454,58.8047 L464,58.8047 " fill="none" style="stroke:#FFB900;stroke-width:3.0;"/><rect fill="#FFB900" height="37.6094" rx="12.5" ry="12.5" style="stroke:#FFB900;stroke-width:3.0;" width="75" x="464" y="137.8281"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="51" x="474" y="162.3613">Benefits</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="39" x="632" y="123.1426">CRUD</text><path d="M539,156.6328 L549,156.6328 C564,156.6328 604,117.4141 619,117.4141 L629,117.4141 " fill="none" style="stroke:#FFB900;stroke-width:3.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="470" x="632" y="142.752">Support for ACID transactions (Atomicity, Consistency, Isolation, Durability)</text><path d="M539,156.6328 L549,156.6328 C564,156.6328 604,137.0234 619,137.0234 L629,137.0234 " fill="none" style="stroke:#FFB900;stroke-width:3.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="196" x="632" y="162.3613">Data versioning and time travel</text><path d="M539,156.6328 L549,156.6328 C564,156.6328 604,156.6328 619,156.6328 L629,156.6328 " fill="none" style="stroke:#FFB900;stroke-width:3.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="271" x="632" y="181.9707">Support for batch and streaming workloads</text><path d="M539,156.6328 L549,156.6328 C564,156.6328 604,176.2422 619,176.2422 L629,176.2422 " fill="none" style="stroke:#FFB900;stroke-width:3.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="234" x="632" y="201.5801">Standard formats and interoperability</text><path d="M539,156.6328 L549,156.6328 C564,156.6328 604,195.8516 619,195.8516 L629,195.8516 " fill="none" style="stroke:#FFB900;stroke-width:3.0;"/><path d="M374,107.8281 L384,107.8281 C399,107.8281 439,156.6328 454,156.6328 L464,156.6328 " fill="none" style="stroke:#FFB900;stroke-width:3.0;"/><path d="M98,386.0586 L108,386.0586 C123,386.0586 163,107.8281 178,107.8281 L188,107.8281 " fill="none" style="stroke:#181818;stroke-width:3.0;"/><rect fill="#F4364C" height="37.6094" rx="12.5" ry="12.5" style="stroke:#F4364C;stroke-width:3.0;" width="198" x="188" y="235.6563"/><text fill="#FFFFFF" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="174" x="198" y="260.1895">2) Create Delta Lake tables</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="285" x="479" y="240.5801">Creating a Delta Lake table from a dataframe</text><path d="M386,254.4609 L396,254.4609 C411,254.4609 451,234.8516 466,234.8516 L476,234.8516 " fill="none" style="stroke:#F4364C;stroke-width:3.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="424" x="479" y="260.1895">Making conditional updates (update, delete, and merge operations)</text><path d="M386,254.4609 L396,254.4609 C411,254.4609 451,254.4609 466,254.4609 L476,254.4609 " fill="none" style="stroke:#F4364C;stroke-width:3.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="241" x="479" y="279.7988">Querying a previous version of a table</text><path d="M386,254.4609 L396,254.4609 C411,254.4609 451,274.0703 466,274.0703 L476,274.0703 " fill="none" style="stroke:#F4364C;stroke-width:3.0;"/><path d="M98,386.0586 L108,386.0586 C123,386.0586 163,254.4609 178,254.4609 L188,254.4609 " fill="none" style="stroke:#181818;stroke-width:3.0;"/><rect fill="#C5B4E3" height="37.6094" rx="12.5" ry="12.5" style="stroke:#C5B4E3;stroke-width:3.0;" width="176" x="188" y="382.0703"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="152" x="198" y="406.6035">3) Create catalog tables</text><rect fill="#C5B4E3" height="37.6094" rx="12.5" ry="12.5" style="stroke:#C5B4E3;stroke-width:3.0;" width="198" x="454" y="333.2656"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="174" x="464" y="357.7988">External vs managed tables</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="349" x="745" y="330.3848">A managed table is defined without a specified location,</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="218" x="745" y="347.9941">dropping the table deletes the files</text><path d="M652,352.0703 L662,352.0703 C677,352.0703 717,333.4609 732,333.4609 L742,333.4609 " fill="none" style="stroke:#C5B4E3;stroke-width:3.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="332" x="745" y="367.6035">An external table is defined for a custom file location,</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="270" x="745" y="385.2129">dropping the table does not delete the files</text><path d="M652,352.0703 L662,352.0703 C677,352.0703 717,370.6797 732,370.6797 L742,370.6797 " fill="none" style="stroke:#C5B4E3;stroke-width:3.0;"/><path d="M364,400.875 L374,400.875 C389,400.875 429,352.0703 444,352.0703 L454,352.0703 " fill="none" style="stroke:#C5B4E3;stroke-width:3.0;"/><rect fill="#C5B4E3" height="37.6094" rx="12.5" ry="12.5" style="stroke:#C5B4E3;stroke-width:3.0;" width="110" x="454" y="430.875"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="86" x="464" y="455.4082">How to create</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="417" x="657" y="435.7988">Creating a catalog table from a dataframe (df.write.format("delta"))</text><path d="M564,449.6797 L574,449.6797 C589,449.6797 629,430.0703 644,430.0703 L654,430.0703 " fill="none" style="stroke:#C5B4E3;stroke-width:3.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="714" x="657" y="455.4082">Creating a catalog table using SQL (CREATE TABLE MyExternalTable USING DELTA LOCATION '/delta/mytable')</text><path d="M564,449.6797 L574,449.6797 C589,449.6797 629,449.6797 644,449.6797 L654,449.6797 " fill="none" style="stroke:#C5B4E3;stroke-width:3.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="201" x="657" y="475.0176">Using the DeltaTableBuilder API</text><path d="M564,449.6797 L574,449.6797 C589,449.6797 629,469.2891 644,469.2891 L654,469.2891 " fill="none" style="stroke:#C5B4E3;stroke-width:3.0;"/><path d="M364,400.875 L374,400.875 C389,400.875 429,449.6797 444,449.6797 L454,449.6797 " fill="none" style="stroke:#C5B4E3;stroke-width:3.0;"/><path d="M98,386.0586 L108,386.0586 C123,386.0586 163,400.875 178,400.875 L188,400.875 " fill="none" style="stroke:#181818;stroke-width:3.0;"/><rect fill="#E1D3C7" height="37.6094" rx="12.5" ry="12.5" style="stroke:#E1D3C7;stroke-width:3.0;" width="263" x="188" y="577.2891"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="239" x="198" y="601.8223">4) Use Delta Lake with streaming data</text><rect fill="#E1D3C7" height="37.6094" rx="12.5" ry="12.5" style="stroke:#E1D3C7;stroke-width:3.0;" width="199" x="541" y="528.4844"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="175" x="551" y="553.0176">Spark Structured Streaming</text><path d="M451,596.0938 L461,596.0938 C476,596.0938 516,547.2891 531,547.2891 L541,547.2891 " fill="none" style="stroke:#E1D3C7;stroke-width:3.0;"/><rect fill="#E1D3C7" height="37.6094" rx="12.5" ry="12.5" style="stroke:#E1D3C7;stroke-width:3.0;" width="230" x="541" y="626.0938"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="206" x="551" y="650.627">Streaming with Delta Lake tables</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="141" x="864" y="623.2129">As a streaming source</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="218" x="864" y="640.8223">(spark.readStream.format("delta"))</text><path d="M771,644.8984 L781,644.8984 C796,644.8984 836,626.2891 851,626.2891 L861,626.2891 " fill="none" style="stroke:#E1D3C7;stroke-width:3.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="123" x="864" y="660.4316">As a streaming sink</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="491" x="864" y="678.041">(stream_df.writeStream.format("delta").option("checkpointLocation", "").start())</text><path d="M771,644.8984 L781,644.8984 C796,644.8984 836,663.5078 851,663.5078 L861,663.5078 " fill="none" style="stroke:#E1D3C7;stroke-width:3.0;"/><path d="M451,596.0938 L461,596.0938 C476,596.0938 516,644.8984 531,644.8984 L541,644.8984 " fill="none" style="stroke:#E1D3C7;stroke-width:3.0;"/><path d="M98,386.0586 L108,386.0586 C123,386.0586 163,596.0938 178,596.0938 L188,596.0938 " fill="none" style="stroke:#181818;stroke-width:3.0;"/><rect fill="#07641D" height="37.6094" rx="12.5" ry="12.5" style="stroke:#07641D;stroke-width:3.0;" width="227" x="188" y="694.5078"/><text fill="#FFFFFF" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="203" x="198" y="719.041">5) Use Delta Lake in a SQL pool</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="317" x="508" y="709.2363">Querying delta formatted files with OPENROWSET</text><path d="M415,713.3125 L425,713.3125 C440,713.3125 480,703.5078 495,703.5078 L505,703.5078 " fill="none" style="stroke:#07641D;stroke-width:3.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="150" x="508" y="728.8457">Querying catalog tables</text><path d="M415,713.3125 L425,713.3125 C440,713.3125 480,723.1172 495,723.1172 L505,723.1172 " fill="none" style="stroke:#07641D;stroke-width:3.0;"/><path d="M98,386.0586 L108,386.0586 C123,386.0586 163,713.3125 178,713.3125 L188,713.3125 " fill="none" style="stroke:#181818;stroke-width:3.0;"/><!--MD5=[50c9999c9f4e2c160a55e5ca1d8cce9a]
@startmindmap
<style>
node {
    Margin 30
}
:depth(0) {
    BackgroundColor #091f2c
    FontColor #ffffff
    LineThickness 3.0
}
.topic1 {
    BackgroundColor #ffb900
    LineColor #ffb900
    LineThickness 3.0
    FontColor #000000
}
.topic2 {
    BackgroundColor #f4364c
    LineColor #f4364c
    LineThickness 3.0
    FontColor #ffffff
}
.topic3 {
    BackgroundColor #c5b4e3
    LineColor #c5b4e3
    LineThickness 3.0
    FontColor #000000
}
.topic4 {
    BackgroundColor #e1d3c7
    LineColor #e1d3c7
    LineThickness 3.0
    FontColor #000000
}
.topic5 {
    BackgroundColor #07641d
    LineColor #07641d
    LineThickness 3.0
    FontColor #ffffff
}
</style>
+ Delta Lake
++ 1) Understand Delta Lake <<topic1>>
+++ What is it? <<topic1>>
++++_ Open-source storage layer that adds relational database semantics to Spark
++++_ Serialization format
+++ Benefits <<topic1>>
++++_ CRUD
++++_ Support for ACID transactions (Atomicity, Consistency, Isolation, Durability)
++++_ Data versioning and time travel
++++_ Support for batch and streaming workloads
++++_ Standard formats and interoperability
++ 2) Create Delta Lake tables <<topic2>>
+++_ Creating a Delta Lake table from a dataframe
+++_ Making conditional updates (update, delete, and merge operations)
+++_ Querying a previous version of a table
++ 3) Create catalog tables <<topic3>>
+++ External vs managed tables <<topic3>>
++++_ A managed table is defined without a specified location, \ndropping the table deletes the files
++++_ An external table is defined for a custom file location, \ndropping the table does not delete the files
+++ How to create <<topic3>>
++++_ Creating a catalog table from a dataframe (df.write.format("delta"))
++++_ Creating a catalog table using SQL (CREATE TABLE MyExternalTable USING DELTA LOCATION '/delta/mytable')
++++_ Using the DeltaTableBuilder API
++ 4) Use Delta Lake with streaming data <<topic4>>
+++ Spark Structured Streaming <<topic4>>
+++ Streaming with Delta Lake tables <<topic4>>
++++_ As a streaming source \n(spark.readStream.format("delta"))
++++_ As a streaming sink \n(stream_df.writeStream.format("delta").option("checkpointLocation", "").start())
++ 5) Use Delta Lake in a SQL pool <<topic5>>
+++_ Querying delta formatted files with OPENROWSET
+++_ Querying catalog tables
@endmindmap

PlantUML version 1.2022.7(Mon Aug 22 19:01:30 CEST 2022)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: Cp1252
Language: en
Country: US
--></g></svg>